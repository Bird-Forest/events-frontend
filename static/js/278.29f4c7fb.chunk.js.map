{"version":3,"file":"static/js/278.29f4c7fb.chunk.js","mappings":"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","sources":["helper/EmptyPage.jsx","pages/Page.styled.js","components/registration/Register.styled.js","components/registration/FormInput.jsx","components/registration/FormRadio.jsx","components/registration/Registration.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import React from 'react';\nimport { GiSherlockHolmes } from 'react-icons/gi';\nimport { WrapEmpty } from './Helper.styled';\n\nexport default function EmptyPage({ message }) {\n  return (\n    <WrapEmpty>\n      <h2 className=\"empty-title\">{message}</h2>\n      <GiSherlockHolmes className=\"icon-empty\" />\n    </WrapEmpty>\n  );\n}\n","import styled from 'styled-components';\n\nexport const WrapPage = styled.div`\n  display: grid;\n  grid-template-columns: minmax(380px, 1fr);\n  grid-template-rows: 1fr;\n  padding: 20px;\n  margin: 0 auto;\n`;\n","import styled from 'styled-components';\n\nexport const FormWrap = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  background-color: #fafafa;\n  margin: 0;\n  padding: 0;\n\n  .my-form {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    max-width: 300px;\n    background-color: white;\n    border-radius: 16px;\n    border: 2px solid #eeeeee;\n    margin: 8px auto;\n    gap: 4px;\n    padding: 8px;\n  }\n  .my-title {\n    font-size: clamp(0.75rem, 0.659rem + 0.45vw, 1rem);\n    text-align: center;\n    font-weight: 700;\n    color: #616161;\n    padding: 0;\n    margin: 0;\n  }\n  .button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-grow: 1;\n    color: white;\n    font-size: 16px;\n    font-weight: 700;\n    background-color: #bdbdbd;\n    border-radius: 16px;\n    border: 1px solid #bdbdbd;\n    outline: #bdbdbd;\n    height: 40px;\n    margin: 0;\n    padding: 0 100px;\n    cursor: pointer;\n    &:hover,\n    :focus {\n      background-color: #757575;\n    }\n    @media screen and (min-width: 767px) {\n      margin: 8px auto;\n    }\n  }\n`;\n\nexport const InputWrap = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  margin: 8px auto 8px auto;\n  .my-input {\n    display: flex;\n    flex-grow: 1;\n    /* height: 20px; */\n    font-size: 16px;\n    border-radius: 8px;\n    border: 2px solid #616161;\n    outline: #616161;\n    padding: 4px 8px;\n    margin: 0;\n  }\n  .my-input.error {\n    border: 2px solid #ff1744;\n  }\n  .label-input {\n    position: absolute;\n    top: -24%;\n    left: 28px;\n    font-size: 14px;\n    text-align: center;\n    color: #616161;\n    background-color: white;\n    pointer-events: none;\n    transition: all 0.2s ease-in-out;\n    padding: 0;\n    margin: 0;\n  }\n  .label-input.error {\n    color: #ff1744;\n  }\n  .my-password {\n    display: flex;\n    flex-grow: 1;\n    /* height: 20px; */\n    font-size: 16px;\n    border-radius: 8px;\n    border: 2px solid #616161;\n    outline: #616161;\n    padding: 4px 8px;\n    margin: 0;\n  }\n  .my-password.error {\n    border: 2px solid #ff1744;\n  }\n`;\nexport const RadioWrap = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 40px 40px;\n  .radio-title {\n    display: grid;\n    font-size: 16px;\n    border-radius: 8px;\n    border: 2px solid #616161;\n    outline: #616161;\n    padding: 4px 8px;\n    margin: 0;\n  }\n  .radio-group {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr;\n  }\n  .lable-picked {\n    display: grid;\n    font-size: 16px;\n    color: #616161;\n  }\n  .label-picked.error {\n    color: #ff1744;\n  }\n  .input-picked {\n    display: grid;\n    font-size: 16px;\n    color: #616161;\n  }\n  .input-picked.error {\n    border: 2px solid #ff1744;\n  }\n`;\nexport const ErrorMessage = styled.div`\n  color: #ff1744;\n  font-size: 12px;\n`;\n","import { useField } from 'formik';\nimport React from 'react';\nimport { ErrorMessage, InputWrap } from './Register.styled';\n\nexport default function FormInput({ label, ...props }) {\n  const [field, meta] = useField(props);\n  const errorClass = meta.touched && meta.error ? 'error' : '';\n  return (\n    <InputWrap>\n      <label\n        htmlFor={props.id || props.name}\n        className={`label-input ${errorClass}`}\n      >\n        {label}\n      </label>\n      <input className={`my-input ${errorClass}`} {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <ErrorMessage>{meta.error}</ErrorMessage>\n      ) : null}\n    </InputWrap>\n  );\n}\n","import { useField } from 'formik';\nimport React from 'react';\nimport { ErrorMessage, RadioWrap } from './Register.styled';\n\nexport default function FormRadio({ name, options }) {\n  const [field, meta] = useField(name);\n  const errorClass = meta.touched && meta.error ? 'error' : '';\n\n  return (\n    <RadioWrap>\n      {options.map(option => (\n        <label key={option.value} className={`label-picked ${errorClass}`}>\n          <input\n            type=\"radio\"\n            {...field}\n            value={option.value}\n            checked={field.value === option.value}\n            className={`input-input ${errorClass}`}\n          />\n          {option.label}\n        </label>\n      ))}\n      {meta.touched && meta.error ? (\n        <ErrorMessage>{meta.error}</ErrorMessage>\n      ) : null}\n    </RadioWrap>\n  );\n}\n","import { Form, Formik } from 'formik';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport FormInput from './FormInput';\nimport FormRadio from './FormRadio';\nimport { FormWrap } from './Register.styled';\nimport { useUpdateEventMutation } from '../../redux/EventSlice';\n\nconst validationSchema = Yup.object({\n  name: Yup.string()\n    .min(5, 'Too Short!')\n    .max(15, 'Too Long!')\n    .required('This field is required'),\n  email: Yup.string().email('Invalid email').required('This field is required'),\n  birthday: Yup.date()\n    .min(new Date(1900, 0, 1))\n    .required('This field is required'),\n  radio: Yup.string().required('Please select'),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  birthday: '',\n  radio: '',\n};\n\nexport default function Registration({ id, data }) {\n  const radioOptions = [\n    { value: 'Social media', label: 'Social media' },\n    { value: 'Friends', label: 'Friends' },\n    { value: 'Found myself', label: 'Found myself' },\n  ];\n\n  const [updateEvent] = useUpdateEventMutation();\n\n  return (\n    <FormWrap>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setSubmitting, resetForm }) => {\n          let arr = data.participants.concat(values);\n\n          let newData = {\n            title: data.title,\n            description: data.description,\n            date: data.date,\n            organizer: data.organizer,\n            participants: arr,\n          };\n\n          updateEvent({ id, newData });\n          setSubmitting(true);\n\n          resetForm();\n        }}\n      >\n        {props => (\n          <Form className=\"my-form\" autoComplete=\"off\">\n            <h3 className=\"my-title\"> Event registration</h3>\n            <FormInput label=\"Full name*\" name=\"name\" type=\"text\" />\n            <FormInput label=\"Email*\" name=\"email\" type=\"email\" />\n            <FormInput label=\"Birthday*\" name=\"birthday\" type=\"date\" />\n            <FormRadio name=\"radio\" options={radioOptions} />\n            <button type=\"submit\" className=\"button\">\n              {props.isSubmitting ? 'loading...' : 'Submit'}\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </FormWrap>\n  );\n}\n","import React from 'react';\nimport { WrapPage } from './Page.styled';\nimport Registration from 'components/registration/Registration';\nimport { useParams } from 'react-router-dom';\nimport Loading from 'helper/Loading';\nimport { useGetEventByIdQuery } from '../redux/EventSlice';\nimport EmptyPage from 'helper/EmptyPage';\n\nexport default function RegisterPage() {\n  const params = useParams();\n  const id = params.id;\n  const { data, error, isLoading } = useGetEventByIdQuery(id);\n  return (\n    <WrapPage>\n      {isLoading ? <Loading /> : <Registration data={data} id={id} />}\n      {error && (\n        <EmptyPage\n          message={'The service is temporarily unavailable. Try later'}\n        />\n      )}\n    </WrapPage>\n  );\n}\n"],"names":["EmptyPage","_ref","message","_jsxs","WrapEmpty","children","_jsx","className","GiSherlockHolmes","WrapPage","styled","_templateObject","_taggedTemplateLiteral","FormWrap","InputWrap","_templateObject2","RadioWrap","_templateObject3","ErrorMessage","_templateObject4","FormInput","label","props","_objectWithoutProperties","_excluded","_useField","useField","_useField2","_slicedToArray","field","meta","errorClass","touched","error","htmlFor","id","name","concat","_objectSpread","FormRadio","options","map","option","type","value","checked","validationSchema","Yup","min","max","required","email","birthday","Date","radio","initialValues","Registration","data","radioOptions","_useUpdateEventMutati","useUpdateEventMutation","updateEvent","Formik","onSubmit","values","_ref2","setSubmitting","resetForm","arr","participants","newData","title","description","date","organizer","Form","autoComplete","isSubmitting","RegisterPage","useParams","_useGetEventByIdQuery","useGetEventByIdQuery","isLoading","Loading"],"sourceRoot":""}