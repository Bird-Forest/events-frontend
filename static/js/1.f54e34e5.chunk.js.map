{"version":3,"file":"static/js/1.f54e34e5.chunk.js","mappings":"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","sources":["helper/EmptyPage.jsx","components/events/Event.styled.js","components/events/Event.jsx","components/events/EventList.jsx","pages/HomePage.jsx","pages/Page.styled.js","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React from 'react';\nimport { GiSherlockHolmes } from 'react-icons/gi';\nimport { WrapEmpty } from './Helper.styled';\n\nexport default function EmptyPage({ message }) {\n  return (\n    <WrapEmpty>\n      <h2 className=\"empty-title\">{message}</h2>\n      <GiSherlockHolmes className=\"icon-empty\" />\n    </WrapEmpty>\n  );\n}\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\n// ***** EVENTLIST *****\nexport const ListWrap = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-content: flex-start;\n  justify-content: center;\n  gap: 16px;\n  list-style: none;\n  padding: 0;\n  margin: 0 auto;\n`;\n//***** ITEM *****/\nexport const ItemWrap = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  width: 340px;\n  height: 380px;\n  gap: 8px;\n  background-color: #00bcd4;\n  border-radius: 10px;\n  border: 1px solid #4dd0e1;\n  padding: 20px;\n`;\nexport const ItemTitle = styled.h3`\n  display: flex;\n  color: #ffffff;\n  font-size: 24px;\n  font-weight: 600;\n  line-height: 1.5;\n  text-align: center;\n`;\nexport const WrapDate = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 28px;\n`;\nexport const ItemOrgn = styled.h4`\n  display: flex;\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  line-height: 1.5;\n`;\nexport const WrapTime = styled.div`\n  display: flex;\n`;\nexport const ItemDate = styled.h4`\n  display: flex;\n  color: #006064;\n  font-size: 20px;\n  font-weight: 600;\n  line-height: 1.5;\n`;\nexport const ItemDescript = styled.p`\n  display: flex;\n  color: #ffffff;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 1.5;\n  text-align: left;\n`;\nexport const WrapLink = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  gap: 16px;\n`;\nexport const ItemLink = styled(Link)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 160px;\n  height: 60px;\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  line-height: 1.5;\n  text-decoration: none;\n  background-color: #00acc1;\n  border-radius: 8px;\n  cursor: pointer;\n  &:hover,\n  :focus {\n    background-color: #0097a7;\n  }\n`;\n","import React from 'react';\nimport {\n  ItemDate,\n  ItemDescript,\n  ItemLink,\n  ItemOrgn,\n  ItemTitle,\n  ItemWrap,\n  WrapDate,\n  WrapLink,\n  WrapTime,\n} from './Event.styled';\n\nexport default function Event({ item }) {\n  const dateObj = new Date(item.date);\n  const date = dateObj.toLocaleDateString();\n  const hours = dateObj.getUTCHours();\n  const minutes = dateObj.getMinutes();\n  const id = item._id;\n\n  return (\n    <ItemWrap>\n      <WrapDate>\n        <ItemOrgn> {item.organizer}</ItemOrgn>\n        <ItemDate>{date}</ItemDate>\n        <WrapTime>\n          <ItemDate>{hours}</ItemDate>\n          <ItemDate>{':'}</ItemDate>\n          <ItemDate>{minutes}</ItemDate>\n        </WrapTime>\n      </WrapDate>\n      <ItemTitle>{item.title}</ItemTitle>\n      <ItemDescript>{item.description}</ItemDescript>\n      <WrapLink>\n        <ItemLink to={`${id}/register`}>Register</ItemLink>\n        <ItemLink to={`${id}/view`}>View</ItemLink>\n      </WrapLink>\n    </ItemWrap>\n  );\n}\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\n// import events from '../../data/events.json';\nimport Event from './Event';\nimport { ListWrap } from './Event.styled';\nimport { useGetEventsQuery } from '../../redux/EventSlice';\nimport Loading from '../../helper/Loading';\nimport EmptyPage from '../../helper/EmptyPage';\n// import Pagination from 'components/pagination/Pagination';\n\nexport default function EventList() {\n  const [page, setPage] = useState(1);\n  const { data, error, isLoading } = useGetEventsQuery(page);\n  console.log(data);\n  const totalItems = 60;\n  const limit = 4;\n  let totalPage = Math.ceil(totalItems / limit);\n\n  return (\n    <ListWrap>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div>\n          {data.map(item => (\n            <Event key={nanoid()} item={item} />\n          ))}\n          <button onClick={() => setPage(page - 1)} disabled={page === 1}>\n            Previous\n          </button>\n          <button\n            onClick={() => setPage(page + 1)}\n            disabled={page === totalPage}\n          >\n            Next\n          </button>\n        </div>\n      )}\n      {error && (\n        <EmptyPage\n          message={'The service is temporarily unavailable. Try later'}\n        />\n      )}\n    </ListWrap>\n  );\n}\n","import EventList from '../components/events/EventList';\nimport React from 'react';\nimport { WrapPage } from './Page.styled';\n// import { useGetEventsQuery } from '../redux/EventSlice';\n// import Loading from 'helper/Loading';\n// import EmptyPage from 'helper/EmptyPage';\n\nexport default function HomePage() {\n  // const { data: events, error, isLoading } = useGetEventsQuery();\n  // console.log(events);\n  return (\n    <WrapPage>\n      <EventList />\n    </WrapPage>\n  );\n}\n","import styled from 'styled-components';\n\nexport const WrapPage = styled.div`\n  display: grid;\n  grid-template-columns: minmax(380px, 1fr);\n  grid-template-rows: 1fr;\n  padding: 20px;\n  margin: 0 auto;\n`;\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n"],"names":["EmptyPage","_ref","message","_jsxs","WrapEmpty","children","_jsx","className","GiSherlockHolmes","ListWrap","styled","_templateObject","_taggedTemplateLiteral","ItemWrap","_templateObject2","ItemTitle","_templateObject3","WrapDate","_templateObject4","ItemOrgn","_templateObject5","WrapTime","_templateObject6","ItemDate","_templateObject7","ItemDescript","_templateObject8","WrapLink","_templateObject9","ItemLink","Link","_templateObject10","Event","item","dateObj","Date","date","toLocaleDateString","hours","getUTCHours","minutes","getMinutes","id","_id","organizer","title","description","to","concat","EventList","_useState","useState","_useState2","_slicedToArray","page","setPage","_useGetEventsQuery","useGetEventsQuery","data","error","isLoading","console","log","totalPage","Math","ceil","totalItems","Loading","map","nanoid","onClick","disabled","HomePage","WrapPage","urlAlphabet","size","arguments","length","undefined","bytes","crypto","getRandomValues","Uint8Array","scopedUrlAlphabet"],"sourceRoot":""}